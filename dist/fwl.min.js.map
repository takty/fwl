{
  "version": 3,
  "sources": ["../src/control/control.ts", "../src/control/button.ts", "../src/control/checkbox.ts", "../src/control/checkboxes.ts", "../src/control/label.ts", "../src/control/list-box.ts", "../src/control/radio-buttons.ts", "../src/layout/layout.ts", "../node_modules/stlics/src/problem/element.ts", "../node_modules/stlics/src/problem/variable.ts", "../node_modules/stlics/src/problem/domain.ts", "../node_modules/stlics/src/problem/domain-ranged.ts", "../node_modules/stlics/src/problem/domain-arbitrary.ts", "../node_modules/stlics/src/problem/constraint.ts", "../node_modules/stlics/src/problem/constraint-1.ts", "../node_modules/stlics/src/problem/constraint-2.ts", "../node_modules/stlics/src/problem/constraint-3.ts", "../node_modules/stlics/src/problem/constraint-n.ts", "../node_modules/stlics/src/problem/problem.ts", "../node_modules/stlics/src/solver/solver.ts", "../node_modules/stlics/src/util/assignment.ts", "../node_modules/stlics/src/util/assignment-list.ts", "../node_modules/stlics/src/util/domain-pruner.ts", "../node_modules/stlics/src/solver/fuzzy/fuzzy-forward-checking.ts", "../src/f-element.ts", "../src/f-layout.ts", "../src/layout/array-horizontal.ts", "../src/layout/array-vertical.ts", "../src/layout/labeling-left.ts", "../src/layout/labeling-top.ts", "../src/f-control.ts", "../src/f-control-caption.ts", "../src/f-control-multiple.ts", "../src/f-control-single.ts", "../src/f-control-single-boolean.ts", "../src/f-layout-array.ts", "../src/f-layout-labeling.ts", "../src/flexible-layout.ts"],
  "sourcesContent": ["type Size = { width: number, height: number };\r\n\r\nexport abstract class Control {\r\n\r\n\t#degree: number;\r\n\t#minSize: Size = { width: 0, height: 0 };\r\n\t#maxSize: Size = { width: Number.MAX_SAFE_INTEGER, height: Number.MAX_SAFE_INTEGER };\r\n\t_owner: any;\r\n\r\n\tconstructor(owner: any, degree: number) {\r\n\t\tthis._owner = owner;\r\n\t\tthis.#degree = degree;\r\n\t}\r\n\r\n\tabstract name(): string;\r\n\r\n\tgetDegree(): number {\r\n\t\treturn this.#degree;\r\n\t}\r\n\r\n\taddPossibleDegreesTo(dest: Set<number>): void {\r\n\t\tdest.add(this.#degree);\r\n\t}\r\n\r\n\tsetMinimumSize(s: Size): void {\r\n\t\tthis.#minSize = { ...s };\r\n\t}\r\n\r\n\tgetMinimumSize(): Size {\r\n\t\treturn { ...this.#minSize };\r\n\t}\r\n\r\n\tsetMaximumSize(s: Size): void {\r\n\t\tthis.#maxSize = { ...s };\r\n\t}\r\n\r\n\tgetMaximumSize(): Size {\r\n\t\treturn { ...this.#maxSize };\r\n\t}\r\n\r\n}\r\n", "import { Control } from './control';\r\n\r\nexport class Button extends Control {\r\n\r\n\t#text: string;\r\n\r\n\tconstructor(owner: any, deg: number, text: string) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#text = text;\r\n\r\n\t\tconst s = { width: this.#text.length + 2, height: 2 };\r\n\t\tthis.setMinimumSize(s);\r\n\t\tthis.setMaximumSize(s);\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'button';\r\n\t}\r\n\r\n}\r\n", "import { Control } from './control';\r\n\r\nexport class Checkbox extends Control {\r\n\r\n\t#text: string;\r\n\r\n\tconstructor(owner: any, deg: number, text: string) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#text = text;\r\n\r\n\t\tconst s = { width: this.#text.length + 2, height: 1 };\r\n\t\tthis.setMinimumSize(s);\r\n\t\tthis.setMaximumSize(s);\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'checkbox';\r\n\t}\r\n\r\n}\r\n", "import { Control } from './control';\r\n\r\nexport class Checkboxes extends Control {\r\n\r\n\t#items: string[];\r\n\r\n\tconstructor(owner: any, deg: number, items: string[]) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#items = [...items];\r\n\r\n\t\tlet maxLen: number = 0;\r\n\t\tfor (const it of items) {\r\n\t\t\tmaxLen = Math.max(maxLen, it.length);\r\n\t\t}\r\n\r\n\t\tconst s = { width: maxLen + 1, height: items.length * 1 };\r\n\t\tthis.setMinimumSize(s);\r\n\t\tthis.setMaximumSize(s);\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'checkboxes';\r\n\t}\r\n\r\n}\r\n", "import { Control } from './control';\r\n\r\nexport class Label extends Control {\r\n\r\n\t#text: string;\r\n\r\n\tconstructor(owner: any, deg: number, text: string) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#text = text;\r\n\r\n\t\tconst s = { width: this.#text.length, height: 1 };\r\n\t\tthis.setMinimumSize(s);\r\n\t\tthis.setMaximumSize(s);\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'label';\r\n\t}\r\n\r\n}\r\n", "import { Layout } from './../layout/layout';\r\nimport { Control } from './control';\r\n\r\nexport class ListBox extends Control {\r\n\r\n\tstatic MIN_ITEM_SIZE: number = 4;\r\n\r\n\t#items: string[];\r\n\r\n\tstatic createVariableInstances(minDeg: number, maxDeg: number, items: string[]): [number, (owner: any) => Layout | Control][] {\r\n\t\tif (items.length <= ListBox.MIN_ITEM_SIZE) {\r\n\t\t\treturn [[maxDeg, (owner: any): any => new ListBox(owner, maxDeg, items, ListBox.MIN_ITEM_SIZE)]];\r\n\t\t}\r\n\t\tconst ret: [number, (owner: any) => any][] = [];\r\n\t\tconst rDeg: number = maxDeg - minDeg;\r\n\t\tfor (let i: number = ListBox.MIN_ITEM_SIZE + 1; i < items.length; ++i) {\r\n\t\t\tconst r: number = maxDeg + rDeg * (i / items.length - 1);\r\n\t\t\tconst count: number = i;\r\n\t\t\tret.push([r, (owner: any): any => new ListBox(owner, r, items, count)]);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tconstructor(owner: any, deg: number, items: string[], count: number = items.length) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#items = [...items];\r\n\r\n\t\tconst minH: number = Math.min(count, ListBox.MIN_ITEM_SIZE) * 1;\r\n\r\n\t\tlet maxLen: number = 0;\r\n\t\tfor (const it of items) {\r\n\t\t\tmaxLen = Math.max(maxLen, it.length);\r\n\t\t}\r\n\r\n\t\tthis.setMinimumSize({ width: maxLen + 1, height: minH });\r\n\t\tthis.setMaximumSize({ width: Number.MAX_SAFE_INTEGER, height: Number.MAX_SAFE_INTEGER });\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'list box';\r\n\t}\r\n\r\n}\r\n", "import { Control } from './control';\r\n\r\nexport class RadioButtons extends Control {\r\n\r\n\t#items: string[];\r\n\r\n\tconstructor(owner: any, deg: number, items: string[]) {\r\n\t\tsuper(owner, deg);\r\n\t\tthis.#items = [...items];\r\n\r\n\t\tlet maxLen: number = 0;\r\n\t\tfor (const it of items) {\r\n\t\t\tmaxLen = Math.max(maxLen, it.length);\r\n\t\t}\r\n\r\n\t\tconst s = { width: maxLen + 1, height: items.length * 1 };\r\n\t\tthis.setMinimumSize(s);\r\n\t\tthis.setMaximumSize(s);\r\n\t}\r\n\r\n\tname(): string {\r\n\t\treturn 'radio buttons';\r\n\t}\r\n\r\n}\r\n", "import { FElement } from '../f-element';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport abstract class Layout {\r\n\r\n\tstatic NO_DIR: number     = -1;\r\n\tstatic VERTICAL: number   = 0;\r\n\tstatic HORIZONTAL: number = 1;\r\n\r\n\t#owner: any;\r\n\t#degree: number;\r\n\t#direction: number;\r\n\r\n\tconstructor(owner: any, degree: number, direction: number = Layout.NO_DIR) {\r\n\t\tthis.#owner     = owner;\r\n\t\tthis.#degree    = degree;\r\n\t\tthis.#direction = direction;\r\n\t}\r\n\r\n\tabstract name(): string;\r\n\r\n\tgetOwner(): any {\r\n\t\treturn this.#owner;\r\n\t}\r\n\r\n\tgetDegree(): number {\r\n\t\treturn this.#degree;\r\n\t}\r\n\r\n\tgetDirection(): number {\r\n\t\treturn this.#direction;\r\n\t}\r\n\r\n\tgetEstimatedMinimumSize(children: FElement[]): Size {\r\n\t\tconst ss: Size[] = children.map(e => e.getEstimatedMinimumSize());\r\n\t\treturn this._calcSize(ss);\r\n\t}\r\n\r\n\tgetEstimatedMinimumSizeIf(children: FElement[], child: FElement, minSize: Size): Size {\r\n\t\tconst ss: Size[] = children.map(e => ((child === e) ? minSize : e.getEstimatedMinimumSize()));\r\n\t\treturn this._calcSize(ss);\r\n\t}\r\n\r\n\tgetMinimumSize(children: FElement[]): Size {\r\n\t\tconst ss: Size[] = children.map(e => e.getMinimumSize());\r\n\t\treturn this._calcSize(ss);\r\n\t}\r\n\r\n\tgetMaximumSize(): Size {\r\n\t\treturn { width: Number.MAX_SAFE_INTEGER, height: Number.MAX_SAFE_INTEGER };\r\n\t}\r\n\r\n\tabstract _calcSize(sizes: Size[]): Size;\r\n\r\n\tabstract doLayout(children: FElement[], size: Size): void;\r\n\r\n}\r\n", "/**\n * The common class of variables and constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nexport class Element {\n\n\t#index: number = -1;\n\t#name: string = '';\n\n\t/**\n\t * It is used when the user wishes to associate an arbitrary object with each element.\n\t */\n\tuserObject: any = null;\n\n\t/**\n\t * Used when the solver wants to associate an arbitrary object with each element.\n\t */\n\tsolverObject: any = null;\n\n\t// Called only from Problem.\n\tsetIndex(index: number): void {\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * Sets the name.\n\t *\n\t * @param name string representing the name.\n\t */\n\tsetName(name: string): void {\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * Get the index on the owned problem.\n\t * Each variable and constraint is assigned a serial number as an index, which is used to access it through the problem.\n\t *\n\t * @return Integer value representing the index.\n\t */\n\tindex(): number {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * Gets the name.\n\t *\n\t * @return String representing the name.\n\t */\n\tname(): string {\n\t\treturn this.#name;\n\t}\n\n}\n", "/**\n * Class that represents a variable.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Problem } from './problem';\nimport { Element } from './element';\nimport { Constraint } from './constraint';\nimport { Domain } from './domain';\n\nexport class Variable extends Element {\n\n\tstatic readonly #INVALID: number = Number.MIN_VALUE;\n\n\t#owner: Problem;\n\n\t#d: Domain;\n\t#v: number = Variable.#INVALID;\n\t#cs: Constraint[] = [];\n\n\t// Called only from Problem.\n\tconstructor(owner: Problem, d: Domain) {\n\t\tsuper();\n\t\tthis.#owner = owner;\n\t\tthis.#d = d;\n\t}\n\n\t/**\n\t * Gets a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\tconst n = this.name();\n\t\tconst np = n ? `(${n})` : '';\n\t\tconst v = this.isEmpty() ? '<empty>' : ('' + this.value());\n\n\t\treturn `x${this.index()}${np} = ${v}`;\n\t}\n\n\t/**\n\t * Gets the number of associated constraints.\n\t * @return Number of constraints.\n\t */\n\tsize(): number {\n\t\treturn this.#cs.length;\n\t}\n\n\t/**\n\t * Gets the associated constraints by specifying their indices.\n\t * @param index Index.\n\t * @return A constraint.\n\t */\n\tat(index: number): Constraint | undefined {\n\t\treturn this.#cs.at(index);\n\t}\n\n\t/**\n\t * Checks whether or not the variable is associated with the specified constraint.\n\t * @param c A constraint.\n\t * @return True if associated.\n\t */\n\thas(c: Constraint): boolean {\n\t\treturn this.#cs.includes(c);\n\t}\n\n\t/**\n\t * Gets the index of a specified constraint.\n\t * If not found, returns -1.\n\t * @param c A constraint.\n\t * @return Index.\n\t */\n\tindexOf(c: Constraint): number {\n\t\treturn this.#cs.indexOf(c);\n\t}\n\n\t/**\n\t * Collects the variables connected via the associated constraints.\n\t * @return An array of variables\n\t */\n\tneighbors(): Variable[] {\n\t\tconst xs: Variable[] = [];\n\n\t\tfor (const c of this.#cs) {\n\t\t\tfor (const x of c) {\n\t\t\t\tif (x !== this) {\n\t\t\t\t\txs.push(x);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn xs;\n\t}\n\n\t/**\n\t * Gets the iterator of the associated constraints.\n\t */\n\t[Symbol.iterator](): Iterator<Constraint> {\n\t\treturn this.#cs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Gets the problem that owns this variable.\n\t * @return Owner.\n\t */\n\towner(): Problem {\n\t\treturn this.#owner;\n\t}\n\n\t// Called only from Problem.\n\tconnect(c: Constraint): void {\n\t\tif (this.#cs.includes(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cs.push(c);\n\t}\n\n\t// Called only from Problem.\n\tdisconnect(c: Constraint): void {\n\t\tif (!this.#cs.includes(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cs = this.#cs.filter(\n\t\t\t(i: Constraint): boolean => i !== c\n\t\t);\n\t}\n\n\t/**\n\t * Gets the domain of the variable.\n\t * @return The domain.\n\t */\n\tdomain(): Domain;\n\n\t/**\n\t * Sets a new domain to the variable.\n\t * The variable will be in unassigned state.\n\t * @param d Domain to be assigned.\n\t */\n\tdomain(d: Domain): void;\n\n\tdomain(d?: Domain): Domain | void {\n\t\tif (d === undefined) {\n\t\t\treturn this.#d;\n\t\t} else {\n\t\t\tthis.#d = d;\n\t\t\tthis.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value: number): void {\n\t\tthis.#v = value;  // Do not change #val except here.\n\t}\n\n\t/**\n\t * Sets the state of the variable to unassigned.\n\t */\n\tclear(): void {\n\t\t// Do not use the invalid value except here and below (isEmpty).\n\t\tthis.assign(Variable.#INVALID);\n\t}\n\n\t/**\n\t * Gets the value of the variable.\n\t * @returnThe value of the variable.\n\t */\n\tvalue(): number {\n\t\treturn this.#v;\n\t}\n\n\t/**\n\t * Checks whether the value is unassigned or not.\n\t * @return True if unassigned.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.value() === Variable.#INVALID;\n\t}\n\n}\n", "/**\n * An abstract class that represents a variable domain.\n * The domain is immutable.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nexport abstract class Domain {\n\n\t/**\n\t * Checks whether the specified value is included as an element of the domain.\n\t *\n\t * @param v A value.\n\t * @return True if the value is included.\n\t */\n\tabstract contains(v: number): boolean;\n\n\t/**\n\t * Gets the index of the specified value. If it does not exist, -1 is returned.\n\t *\n\t * @param v A value.\n\t * @return The index.\n\t */\n\tabstract indexOf(v: number): number;\n\n\t/**\n\t * Gets the size of the domain, including the pruned elements.\n\t *\n\t * @return The size.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the value at the specified index. The retrieved value may have been pruned.\n\t *\n\t * @param index An index.\n\t * @return The value.\n\t */\n\tabstract at(index: number): number;\n\n\t/**\n\t * Gets the iterator of the values of the domain.\n\t */\n\tabstract [Symbol.iterator](): Iterator<number>;\n\n\t/**\n\t * Gets an arbitrary value, regardless of whether it has been pruned or not.\n\t *\n\t * @return A value.\n\t */\n\trandom(): number {\n\t\treturn this.at(Math.floor(Math.random() * this.size()));\n\t}\n\n}\n", "/**\n * A variable domain with contiguous integer elements.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Domain } from './domain';\n\nexport class DomainRanged extends Domain {\n\n\t#min: number;\n\t#max: number;\n\n\tconstructor(min: number, max: number) {\n\t\tsuper();\n\t\tthis.#min = min | 0;\n\t\tthis.#max = max | 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(v: number): boolean {\n\t\treturn this.#min <= v && v <= this.#max;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: number): number {\n\t\treturn (this.#min <= v && v <= this.#max) ? (v - this.#min) : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#max - this.#min + 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#min + index;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\tlet v: number = this.#min;\n\t\tconst max: number = this.#max;\n\t\treturn {\n\t\t\tnext(): IteratorResult<number> {\n\t\t\t\tif (v <= max) {\n\t\t\t\t\treturn { value: v++, done: false };\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: null, done: true };\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n}\n", "/**\n * A variable domain with arbitrary elements.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Domain } from './domain';\n\nexport class DomainArbitrary extends Domain {\n\n\t#vs: number[];\n\n\tconstructor(vs: number[]) {\n\t\tsuper();\n\t\tthis.#vs = [...vs];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(v: number): boolean {\n\t\treturn this.#vs.includes(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: number): number {\n\t\treturn this.#vs.indexOf(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#vs.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#vs[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\treturn this.#vs[Symbol.iterator]();\n\t}\n\n}\n", "/**\n * The class represents a constraint.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Element } from './element';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\nimport { CrispRelation, FuzzyRelation } from './relation';\n\nexport abstract class Constraint extends Element {\n\n\t/**\n\t * The constant indicating that the satisfaction degree is not defined.\n\t */\n\tstatic UNDEFINED: -1 = -1;\n\n\trel: Relation;\n\n\t// Called only from Problem.\n\tconstructor(r: Relation) {\n\t\tsuper();\n\t\tthis.rel = r;\n\t}\n\n\t/**\n\t * Returns the crisp relation between variables.\n\t * @return Relation.\n\t */\n\tcrispRelation(): CrispRelation {\n\t\treturn this.rel as CrispRelation;\n\t}\n\n\t/**\n\t * Returns the fuzzy relation between variables.\n\t * @return Relation.\n\t */\n\tfuzzyRelation(): FuzzyRelation {\n\t\treturn this.rel as FuzzyRelation;\n\t}\n\n\t/**\n\t * Returns whether this is a fuzzy constraint.\n\t * @return True if it is fuzzy constraint.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn 'satisfactionDegree' in this.rel;\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\tconst n = this.name();\n\t\tconst np = n ? `(${n})` : '';\n\t\tconst s = this.satisfactionDegree();\n\t\tconst sn = s === Constraint.UNDEFINED ? 'UNDEFINED' : ('' + s);\n\n\t\treturn `c${this.index()}${np} = ${sn}`;\n\t}\n\n\t/**\n\t * Returns the order of the constraint, i.e., the number of (associated) variables in the scope.\n\t * @return Order.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the associated variable by specifying its index.\n\t * @param index Index.\n\t * @return A variable.\n\t */\n\tabstract at(index: number): Variable | undefined;\n\n\t/**\n\t * Returns whether the specified variable is associated or not.\n\t * @param x A variable.\n\t * @return True if it is associated.\n\t */\n\tabstract has(x: Variable): boolean;\n\n\t/**\n\t * Gets the index of a specified variable.\n\t * If not found, returns -1.\n\t * @param x A variable.\n\t * @return Index.\n\t */\n\tabstract indexOf(x: Variable): number;\n\n\t/**\n\t * Returns the set of constraints connected via the associated variables.\n\t * @return A set of constraints.\n\t */\n\tabstract neighbors(): Constraint[];\n\n\t/**\n\t * Gets the iterator of the associated variables.\n\t */\n\tabstract [Symbol.iterator](): Iterator<Variable>;\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Returns the number of scope variables that have not been assigned a value.\n\t * @return Number of variables\n\t */\n\tabstract emptyVariableSize(): number;\n\n\t/**\n\t * Returns whether or not the satisfaction (degree) is defined.\n\t * Satisfaction (degree) is defined when all associated variables have values assigned to them.\n\t * @return True if it is defined.\n\t */\n\tabstract isDefined(): boolean;\n\n\t/**\n\t * Returns whether or not this constraint is satisfied.\n\t * @return 1 if satisfied, 0 if not, UNDEFINED if undefined\n\t */\n\tabstract isSatisfied(): -1 | 0 | 1;\n\n\t/**\n\t * Gets the current satisfaction degree.\n\t * @return Degree 0 - 1, UNDEFINED if undefined.\n\t */\n\tabstract satisfactionDegree(): number;\n\n\t/**\n\t * Calculates the highest consistency degree.\n\t * That is, it seeks the highest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The highest consistency degree.\n\t */\n\tabstract highestConsistencyDegree(): number;\n\n\t/**\n\t * Calculates the lowest consistency degree.\n\t * That is, it seeks the lowest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The lowest consistency degree.\n\t */\n\tabstract lowestConsistencyDegree(): number;\n\n}\n", "/**\n * The class represents an unary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class Constraint1 extends Constraint {\n\n\t#xs: [Variable] = [] as unknown as [Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable) {\n\t\treturn x === this.#xs[0];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\treturn (x === this.#xs[0]) ? 0 : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\treturn this.#xs[0].isEmpty() ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 0;\n\n\t\tfor (const v of this.#xs[0].domain()) {\n\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v);\n\t\t\tif (s > cd) {\n\t\t\t\tcd = s;\n\t\t\t}\n\t\t\tif (cd === 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\n\t\tfor (const v of this.#xs[0].domain()) {\n\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v);\n\t\t\tif (s < cd) {\n\t\t\t\tcd = s;\n\t\t\t}\n\t\t\tif (cd === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an binary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class Constraint2 extends Constraint {\n\n\t#xs: [Variable, Variable] = [] as unknown as [Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x1: Variable, x2: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x1, x2];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs[0] === x || this.#xs[1] === x;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\tif (x === this.#xs[0]) return 0;\n\t\tif (x === this.#xs[1]) return 1;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[1]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tif (this.#xs[0].isEmpty()) ++n;\n\t\tif (this.#xs[1].isEmpty()) ++n;\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty() && !this.#xs[1].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value(), this.#xs[1].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value(), this.#xs[1].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 0;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an 3-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class Constraint3 extends Constraint {\n\n\t#xs: [Variable, Variable, Variable] = [] as unknown as [Variable, Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, x1: Variable, x2: Variable, x3: Variable) {\n\t\tsuper(r);\n\t\tthis.#xs = [x1, x2, x3];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs[0] === x || this.#xs[1] === x || this.#xs[2] === x;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\tif (x === this.#xs[0]) return 0;\n\t\tif (x === this.#xs[1]) return 1;\n\t\tif (x === this.#xs[2]) return 2;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of this.#xs[0]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[1]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\tfor (const c of this.#xs[2]) {\n\t\t\tif (c !== this) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tif (this.#xs[0].isEmpty()) ++n;\n\t\tif (this.#xs[1].isEmpty()) ++n;\n\t\tif (this.#xs[2].isEmpty()) ++n;\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty() || this.#xs[2].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(this.#xs[0].value(), this.#xs[1].value(), this.#xs[2].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#xs[0].isEmpty() || this.#xs[1].isEmpty() || this.#xs[2].isEmpty()) {\n\t\t\treturn Constraint.UNDEFINED;\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#xs[0].value(), this.#xs[1].value(), this.#xs[2].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst v3: number = this.#xs[2].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\t\tconst d3: Domain = this.#xs[2].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v3 of d3) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\t\tif (s > cd) {\n\t\t\t\t\t\t\tcd = s;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cd === 1) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd: number = 1;\n\t\tconst v1: number = this.#xs[0].value();\n\t\tconst v2: number = this.#xs[1].value();\n\t\tconst v3: number = this.#xs[2].value();\n\t\tconst d1: Domain = this.#xs[0].domain();\n\t\tconst d2: Domain = this.#xs[1].domain();\n\t\tconst d3: Domain = this.#xs[2].domain();\n\n\t\tif (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v3 of d3) {\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && !this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#xs[0].isEmpty() && !this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#xs[0].isEmpty() && this.#xs[1].isEmpty() && this.#xs[2].isEmpty()) {\n\t\t\tfor (const v2 of d2) {\n\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\tcd = s;\n\t\t\t\t\t}\n\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v1 of d1) {\n\t\t\t\tfor (const v2 of d2) {\n\t\t\t\t\tfor (const v3 of d3) {\n\t\t\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(v1, v2, v3);\n\t\t\t\t\t\tif (s < cd) {\n\t\t\t\t\t\t\tcd = s;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cd === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an n-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { Relation } from './relation';\n\nexport class ConstraintN extends Constraint {\n\n\t#xs: Variable[];\n\t#vs: number[];  // For reuse.\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, ...xs: Variable[]) {\n\t\tsuper(r);\n\t\tthis.#xs = [...xs];\n\t\tthis.#vs = new Array(this.#xs.length);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#xs.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable | undefined {\n\t\treturn this.#xs.at(index);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(x: Variable): boolean {\n\t\treturn this.#xs.includes(x);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(x: Variable): number {\n\t\treturn this.#xs.indexOf(x);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const x of this.#xs) {\n\t\t\tfor (const c of x) {\n\t\t\t\tif (c !== this) {\n\t\t\t\t\tcs.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#xs[Symbol.iterator]();\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\t++n;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1 | 0 | 1 {\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tthis.#vs[i] = x.value();\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(...this.#vs) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\treturn Constraint.UNDEFINED;\n\t\t\t}\n\t\t\tthis.#vs[i] = x.value();\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c: number = 0;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vs[i] = x.value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkHCD(emptyIndices, 0, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd: number = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c: number = 0;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (x.isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vs[i] = x.value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkLCD(emptyIndices, 0, 1);\n\t}\n\n\tcheckHCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index: number = emptyIndices[currentStep];\n\t\tconst d: Domain = this.#xs[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t\t\t\tif (s > cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\tcheckLCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index: number = emptyIndices[currentStep];\n\t\tconst d: Domain = this.#xs[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tconst s: number = this.fuzzyRelation().satisfactionDegree(...this.#vs);\n\t\t\t\tif (s < cd) {\n\t\t\t\t\tcd = s;\n\t\t\t\t}\n\t\t\t\tif (cd === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const v of d) {\n\t\t\t\tthis.#vs[index] = v;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents a constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { DomainRanged } from './domain-ranged';\nimport { DomainArbitrary } from './domain-arbitrary';\nimport { Constraint } from './constraint';\nimport { Constraint1 } from './constraint-1';\nimport { Constraint2 } from './constraint-2';\nimport { Constraint3 } from './constraint-3';\nimport { ConstraintN } from './constraint-n';\nimport { Relation } from './relation';\n\nexport class Problem {\n\n\t#fv: (o: Problem, d: Domain) => Variable = (o: Problem, d: Domain): Variable => new Variable(o, d);\n\t#fc: (r: Relation, xs: Variable[]) => Constraint = (r: Relation, xs: Variable[]): Constraint => {\n\t\tif (xs.length === 1) {\n\t\t\treturn new Constraint1(r, xs[0]);\n\t\t}\n\t\tif (xs.length === 2) {\n\t\t\treturn new Constraint2(r, xs[0], xs[1]);\n\t\t}\n\t\tif (xs.length === 3) {\n\t\t\treturn new Constraint3(r, xs[0], xs[1], xs[2]);\n\t\t}\n\t\treturn new ConstraintN(r, ...xs);\n\t};\n\n\t#isFuzzy: boolean = false;\n\t#xs: Variable[] = [];\n\t#cs: Constraint[] = [];\n\n\t// Methods for Modifying Factories --------\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetVariableFactory(fn: (o: Problem, d: Domain) => Variable): void {\n\t\tthis.#fv = fn;\n\t}\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetConstraintFactory(fn: (r: Relation, xs: Variable[]) => Constraint): void {\n\t\tthis.#fc = fn;\n\t}\n\n\t// Generation Methods --------\n\n\t/**\n\t * Adds a variable to this problem.\n\t * @param Variable v A variable.\n\t */\n\taddVariable(x: Variable): void {\n\t\tx.setIndex(this.#xs.length);\n\t\tthis.#xs.push(x);\n\t}\n\n\t/**\n\t * Generates a domain.\n\t * @param args {\n\t *   @type Array 'values' Multiple values.\n\t *\n\t *   @type Number 'min' Minimum value.\n\t *   @type Number 'max' Maximum value.\n\t * }\n\t * @return A domain.\n\t */\n\tcreateDomain(args: { values: number[]; } | { min: number, max: number; }): Domain | null {\n\t\tif ('values' in args) {\n\t\t\treturn new DomainArbitrary(args.values);\n\t\t} else if ('min' in args && 'max' in args) {\n\t\t\treturn new DomainRanged(args.min, args.max);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Generates a variable.\n\t * @param Array args {\n\t *   @type string 'name'   Display name.\n\t *   @type Domain 'domain' A domain.\n\t *   @type *      'value'  A value.\n\t * }\n\t * @return A variable.\n\t */\n\tcreateVariable(args: { name: string, domain: Domain, value?: number; } | { variable: Variable; }): Variable {\n\t\tif ('variable' in args) {\n\t\t\tconst x: Variable = this.#fv(this, args.variable.domain());\n\t\t\tthis.addVariable(x);\n\t\t\tx.setName(x.name());\n\t\t\tx.assign(x.value());\n\t\t\treturn x;\n\t\t} else {\n\t\t\tif (args.value !== undefined && !args.domain.contains(args.value)) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t\tconst x: Variable = this.#fv(this, args.domain);\n\t\t\tthis.addVariable(x);\n\t\t\tif (args.name) {\n\t\t\t\tx.setName(args.name);\n\t\t\t}\n\t\t\tif (args.value) {\n\t\t\t\tx.assign(args.value);\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\t}\n\n\t/**\n\t * Generates a constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args: { name?: string, variables: Variable[], relation: Relation; }): Constraint | null {\n\t\tfor (const x of args.variables) {\n\t\t\tif (x.owner() !== this) return null;\n\t\t}\n\t\tconst c: Constraint = this.#fc(args.relation, args.variables);\n\t\tc.setIndex(this.#cs.length);\n\t\tthis.#cs.push(c);\n\t\tfor (const x of args.variables) {\n\t\t\tx.connect(c);\n\t\t}\n\t\tif (c.isFuzzy()) {\n\t\t\tthis.#isFuzzy = true;\n\t\t}\n\t\tif ('name' in args) {\n\t\t\tc.setName(args.name as string);\n\t\t}\n\t\treturn c;\n\t}\n\n\t//  Modification Methods --------\n\n\t/**\n\t * Remove the constraint.\n\t * @param c Constraints to be removed.\n\t */\n\tremoveConstraint(c: Constraint): void {\n\t\tconst index: number = this.#cs.indexOf(c);\n\t\tthis.#cs.splice(index, 1);\n\t\tfor (let i: number = index; i < this.#cs.length; ++i) {\n\t\t\tthis.#cs[i].setIndex(i);\n\t\t}\n\t\tfor (const x of c) {\n\t\t\tx.disconnect(c);\n\t\t}\n\t\tthis.#isFuzzy = false;\n\t\tfor (const c of this.#cs) {\n\t\t\tif (c.isFuzzy()) {\n\t\t\t\tthis.#isFuzzy = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Changes the status of all variables to unassigned.\n\t */\n\tclearAllVariables(): void {\n\t\tfor (const x of this.#xs) {\n\t\t\tx.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the order of variables.\n\t * The index of each variable is reassigned.\n\t */\n\treverseVariables(): void {\n\t\tthis.#xs.reverse();\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tthis.#xs[i].setIndex(i);\n\t\t}\n\t}\n\n\t/**\n\t * Sorts variables using a specified comparator.\n\t * The index of each variable is reassigned.\n\t * @param comparator A comparator.\n\t */\n\tsortVariables(comparator: (a: Variable, b: Variable) => number): void {\n\t\tthis.#xs.sort(comparator);\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tthis.#xs[i].setIndex(i);\n\t\t}\n\t}\n\n\t// Methods for Variables --------\n\n\t/**\n\t * Returns the number of variables in the problem.\n\t * @return Number of variables\n\t */\n\tvariableSize(): number {\n\t\treturn this.#xs.length;\n\t}\n\n\t/**\n\t * Returns a variable by index.\n\t * @param index Index (0 <= index < getVariableSize()).\n\t * @return A variable\n\t */\n\tvariableAt(index: number): Variable {\n\t\treturn this.#xs[index];\n\t}\n\n\t/**\n\t * Returns a variable by name.\n\t * @param name Name.\n\t * @return A variable.\n\t */\n\tvariableOf(name: string): Variable | null {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.name() === name) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the variable is contained or not.\n\t * @param x A variable.\n\t * @return True if contained.\n\t */\n\thasVariable(x: Variable): boolean {\n\t\treturn this.#xs.includes(x);\n\t}\n\n\t/**\n\t * Returns the list of variables.\n\t * The returned list is not allowed to be modified.\n\t * @return The variable list.\n\t */\n\tvariables(): Variable[] {\n\t\treturn this.#xs;\n\t}\n\n\t// Methods for Constraints --------\n\n\t/**\n\t * Gets the number of constraints in the problem.\n\t * @return Number of constraints\n\t */\n\tconstraintSize(): number {\n\t\treturn this.#cs.length;\n\t}\n\n\t/**\n\t * Returns a constraint with an index.\n\t * @param index Index (0 <= index < constraintSize()).\n\t * @return A constraint.\n\t */\n\tconstraintAt(index: number): Constraint {\n\t\treturn this.#cs[index];\n\t}\n\n\t/**\n\t * Returns a constraint by name.\n\t * @param name Name.\n\t * @return A constraint.\n\t */\n\tconstraintOf(name: string): Constraint | null {\n\t\tfor (const c of this.#cs) {\n\t\t\tif (c.name() === name) {\n\t\t\t\treturn c;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the constraint is contained or not.\n\t * @param c A constraint\n\t * @return True if contained.\n\t */\n\thasConstraint(c: Constraint): boolean {\n\t\treturn this.#cs.includes(c);\n\t}\n\n\t/**\n\t * Returns the list of constraint.\n\t * The returned list is not allowed to be modified.\n\t * @return The constraint list.\n\t */\n\tconstraints(): Constraint[] {\n\t\treturn this.#cs;\n\t}\n\n\t/**\n\t * Gets the constraints that exist between the specified variables.\n\t * Returns an empty array if no constraints exist.\n\t * If there are multiple constraints between two variables (including the case of n-ary constraints (2 < n)), they will be included in the return array.\n\t * @param v1 Variable 1\n\t * @param v2 Variable 2\n\t * @return Constraints.\n\t */\n\tconstraintsBetween(v1: Variable, v2: Variable): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\t\tfor (const c of v1) {\n\t\t\tif (c.has(v2)) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Finds the set of worst satisfiable constraints in a fuzzy constraint satisfaction problem.\n\t * @return Array of constraints and worst satisfaction degree.\n\t */\n\tconstraintsWithWorstSatisfactionDegree(): [Constraint[], number] {\n\t\tconst cs: Constraint[] = [];\n\t\tlet cur: number = 1;\n\t\tfor (const c of this.#cs) {\n\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\tif (s < cur) {\n\t\t\t\tcur = s;\n\t\t\t\tcs.length = 0;\n\t\t\t\tcs.push(c);\n\t\t\t} else if (s - cur < Number.MIN_VALUE * 10) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn [cs, cur];\n\t}\n\n\t// State acquisition methods --------\n\n\t/**\n\t * Returns the worst satisfaction degree for the constraints contained in the fuzzy constraint satisfaction problem.\n\t * If the degree cannot be determined because the variable has not yet been assigned a value or for some other reason, -1 is returned.\n\t * @return Worst satisfaction degree.\n\t */\n\tworstSatisfactionDegree(): number {\n\t\tlet cs: number = 1;\n\t\tfor (const c of this.#cs) {\n\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\tif (s === Constraint.UNDEFINED) return Constraint.UNDEFINED;\n\t\t\tif (s < cs) cs = s;\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Gets the average of satisfaction degrees of the fuzzy constraints.\n\t * @return Average of satisfaction degrees.\n\t */\n\taverageSatisfactionDegree(): number {\n\t\tlet ave: number = 0;\n\t\tfor (const c of this.#cs) {\n\t\t\tave += c.satisfactionDegree();\n\t\t}\n\t\tave = ave / this.#cs.length;\n\t\treturn ave;\n\t}\n\n\t/**\n\t * Returns the number of variables in the problem that have not been assigned a value.\n\t * @return Number of variables with no value assigned.\n\t */\n\temptyVariableSize(): number {\n\t\tlet n: number = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.isEmpty()) {\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * Gets the constraint density (number of constraints/number of variables).\n\t * @return Constraint density.\n\t */\n\tconstraintDensity(): number {\n\t\treturn this.constraintSize() / this.variableSize();\n\t}\n\n\t/**\n\t * Returns whether the constraint satisfaction problem has any variables with empty domain.\n\t * @return True if it exists.\n\t */\n\thasEmptyDomain(): boolean {\n\t\tfor (const x of this.#xs) {\n\t\t\tif (x.domain().size() === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return True if it is a fuzzy constraint satisfaction problem.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn this.#isFuzzy;\n\t}\n\n}\n", "/**\n * The class for solvers for finding solutions to constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2024-10-22\n */\n\nimport { Problem } from '../problem/problem';\nimport { AssignmentList } from '../util/assignment-list';\n\nexport class Solver {\n\n\t_debug: boolean = true;\n\n\t#debugOutput: (e: any) => void = (e: any): void => console.log(e);\n\n\t/**\n\t * The crisp/fuzzy constraint satisfaction problem solved by the solver.\n\t */\n\t_pro: Problem;\n\n\t/**\n\t *  Limit number of iterations.\n\t */\n\t_iterLimit: number|null = null;\n\n\t/**\n\t * Time limit.\n\t */\n\t_timeLimit: number|null = null;\n\n\t/**\n\t * Target 'satisfied constraint rate' or 'constraint satisfaction degree'.\n\t */\n\t_targetDeg: number|null = 0.8;\n\n\t/**\n\t * Listeners of this solver.\n\t */\n\t#listener: { foundSolution: ((as: AssignmentList, wd: number) => boolean) }[] = [];\n\n\t/**\n\t * Generates a solver given a constraint satisfaction problem.\n\t * @param pro A constraint satisfaction problem.\n\t */\n\tconstructor(pro: Problem) {\n\t\tthis._pro = pro;\n\t}\n\n\t/**\n\t * Returns the name of the solver.\n\t * @return The name.\n\t */\n\tname(): string {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Placeholder for implementing an algorithm.\n\t * The solve method calls this method and returns the return value of this method.\n\t * @return True if the algorithm succeeds,\n\t */\n\texec(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets and limits the maximum number of iterations for the solver's behavior.\n\t * After the specified number of iterations, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param count Maximum value; null means not set.\n\t */\n\tsetIterationLimit(count: number|null = null): void {\n\t\tthis._iterLimit = count;\n\t}\n\n\t/**\n\t * Sets a time limit on the solver's behavior.\n\t * If the specified time is exceeded, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param msec Time limit. null means not set.\n\t */\n\tsetTimeLimit(msec: number|null = null): void {\n\t\tthis._timeLimit = msec;\n\t}\n\n\t/**\n\t * The goal to be achieved, which is the condition for stopping the solver, is set as the constraint satisfaction degree (fuzzy) or the percentage of constraints satisfied (crisp).\n\t * The solver stops as success if the specified percentage is reached or exceeded. The specific behavior depends on the solver.\n\t * @param rate Degree or rate. null indicates not set.\n\t */\n\tsetTargetRate(rate: number|null = null): void {\n\t\tthis._targetDeg = rate;\n\t}\n\n\t/**\n\t * Computes the solution to a constraint satisfaction problem.\n\t * The specific meaning of the return value depends on the implementation of the algorithm.\n\t * @return True if the algorithm succeeds\n\t */\n\tsolve(): boolean {\n\t\treturn this.exec();\n\t}\n\n\taddListener(l: { foundSolution: (solution: AssignmentList, worstDegree: number) => boolean; }): void {\n\t\tthis.#listener.push(l);\n\t}\n\n\tremoveListener(l: { foundSolution: (solution: AssignmentList, worstDegree: number) => boolean; }): void {\n\t\tthis.#listener.splice(this.#listener.indexOf(l), 1);\n\t}\n\n\tfoundSolution(solution: AssignmentList, worstDegree: number): boolean {\n\t\tlet finish: boolean = false;\n\n\t\tfor (const l of this.#listener) {\n\t\t\tif (l.foundSolution(solution, worstDegree)) {\n\t\t\t\tfinish = true;\n\t\t\t}\n\t\t}\n\t\treturn finish;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Sets whether to output debug strings.\n\t * @param boolean flag Do output if true.\n\t */\n\tsetDebugMode(flag: boolean): void {\n\t\tthis._debug = flag;\n\t}\n\n\t/**\n\t * Sets a function that used for outputting debug strings.\n\t * @param function fn Function called when debug output.\n\t */\n\tsetDebugOutput(fn: (e: any) => void): void {\n\t\tthis.#debugOutput = fn;\n\t}\n\n\t_debugOutput(str: any): void {\n\t\tif (this._debug) this.#debugOutput(str);\n\t}\n\n}\n", "/**\n * The class represents a pair of variables and the values to be assigned to them.\n *\n * @author Takuto Yanagida\n * @version 2024-10-22\n */\n\nimport { Variable } from '../problem/variable';\n\nexport class Assignment {\n\n\t#x: Variable;\n\t#v: number;\n\n\tconstructor(args: { assignment: Assignment; } | { variable: Variable; value?: number|null }) {\n\t\tif ('assignment' in args) {\n\t\t\tthis.#x = args.assignment.variable();\n\t\t\tthis.#v = args.assignment.value();\n\t\t} else if ('variable' in args) {\n\t\t\tthis.#x = args.variable;\n\t\t\tthis.#v = args.value ?? args.variable.value();\n\t\t} else {\n\t\t\tthrow new RangeError();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns a value to a stored variable.\n\t */\n\tapply(): void {\n\t\tthis.#x.assign(this.#v);\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\treturn `v${this.#x.index()} <- ${this.#v}`;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return Value.\n\t */\n\tvalue(): number {\n\t\treturn this.#v;\n\t}\n\n\t/**\n\t * Gets the variable.\n\t * @return Variable.\n\t */\n\tvariable(): Variable {\n\t\treturn this.#x;\n\t}\n\n}\n", "/**\n * The class represents multiple variables and their assignments.\n *\n * @author Takuto Yanagida\n * @version 2024-10-22\n */\n\nimport { Assignment } from './assignment';\nimport { Variable } from '../problem/variable';\nimport { Problem } from '../problem/problem';\n\nexport class AssignmentList {\n\n\tstatic fromVariables(xs: Iterable<Variable>): AssignmentList {\n\t\tconst al = new AssignmentList();\n\t\tal.setVariables(xs);\n\t\treturn al;\n\t}\n\n\t#as: Assignment[] = [];\n\n\tconstructor() {\n\t}\n\n\tsetProblem(p: Problem): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const x of p.variables()) {\n\t\t\tthis.#as.push(new Assignment({ variable: x, value: x.value() }));\n\t\t}\n\t}\n\n\tsetAssignmentList(al: AssignmentList): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const a of al) {\n\t\t\tthis.#as.push(new Assignment({ variable: a.variable(), value: a.value() }));\n\t\t}\n\t}\n\n\tsetVariables(xs: Iterable<Variable>): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const x of xs) {\n\t\t\tthis.#as.push(new Assignment({ variable: x, value: x.value() }));\n\t\t}\n\t}\n\n\taddVariable(variable: Variable, value: number | null = null): void {\n\t\tthis.#as.push(new Assignment({ variable, value }));\n\t}\n\n\tapply(): void {\n\t\tfor (const a of this.#as) a.apply();\n\t}\n\n\t/**\n\t * Remove all assignments.\n\t */\n\tclear(): void {\n\t\tthis.#as.length = 0;\n\t}\n\n\t/**\n\t * Checks whether the list is empty or not.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#as.length === 0;\n\t}\n\n\t/**\n\t * Gets the number of assignments.\n\t * @return Number of assignments.\n\t */\n\tsize(): number {\n\t\treturn this.#as.length;\n\t}\n\n\tdifferenceSize(): number {\n\t\tlet diff: number = 0;\n\n\t\tfor (const a of this.#as) {\n\t\t\tif (a.variable().value() !== a.value()) {\n\t\t\t\t++diff;\n\t\t\t}\n\t\t}\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Gets the assignments by specifying their indices.\n\t * @param index Index.\n\t * @return An assignment.\n\t */\n\tat(index: number): Assignment {\n\t\treturn this.#as[index];\n\t}\n\n\t/**\n\t * Gets the iterator of the assignments.\n\t */\n\t[Symbol.iterator](): Iterator<Assignment> {\n\t\treturn this.#as[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Gets an arbitrary assignment.\n\t *\n\t * @return An assignment.\n\t */\n\trandom(): Assignment {\n\t\treturn this.#as[Math.floor(Math.random() * this.#as.length)];\n\t}\n\n}\n", "/**\n * This class holds the branch pruning states for a domain.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nexport class DomainPruner {\n\n\tstatic #UNHIDDEN: number = -1;\n\n\t#hiddenLevels: number[];\n\t#hiddenSize: number = 0;\n\n\t/**\n\t * Generates a class that holds branch pruning states for a domain.\n\t * @param size Size of the corresponding domain\n\t */\n\tconstructor(size: number) {\n\t\tthis.#hiddenLevels = new Array(size);\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t}\n\n\t/**\n\t * Returns the size of the erased element.\n\t * @return Size of the erased element.\n\t */\n\thiddenSize(): number {\n\t\treturn this.#hiddenSize;\n\t}\n\n\t/**\n\t * Erases the element at the specified index.\n\t * @param index Index.\n\t * @param level Level.\n\t */\n\thide(index: number, level: number): void {\n\t\tif (this.#hiddenLevels[index] === DomainPruner.#UNHIDDEN) {\n\t\t\t++this.#hiddenSize;\n\t\t}\n\t\tthis.#hiddenLevels[index] = level;\n\t}\n\n\t/**\n\t * Returns whether the element is empty or not.\n\t * Returns true if all elements have been erased.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#hiddenLevels.length === this.#hiddenSize;\n\t}\n\n\t/**\n\t * Returns whether or not the element at the specified index has been erased.\n\t * @param index Index.\n\t * @return True if erased.\n\t */\n\tisValueHidden(index: number): boolean {\n\t\treturn this.#hiddenLevels[index] !== DomainPruner.#UNHIDDEN;\n\t}\n\n\t/**\n\t * Restores the value that had been erased, by specifying a level.\n\t * @param level Level\n\t */\n\treveal(level: number): void {\n\t\tfor (let i = 0; i < this.#hiddenLevels.length; ++i) {\n\t\t\tif (this.#hiddenLevels[i] === level) {\n\t\t\t\tthis.#hiddenLevels[i] = DomainPruner.#UNHIDDEN;\n\t\t\t\t--this.#hiddenSize;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restores all erased values.\n\t */\n\trevealAll(): void {\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t\tthis.#hiddenSize = 0;\n\t}\n\n}\n", "/**\n * This class implements the forward checking method for fuzzy CSP.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2024-10-23\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Domain } from '../../problem/domain';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class FuzzyForwardChecking extends Solver {\n\n\tstatic CONTINUE: number = 0;\n\tstatic TERMINATE: number = 1;\n\n\t#xs: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\t#relCons: Constraint[][][] = [];  // Table to cache constraints between two variables.\n\n\t#solWorstDeg: number = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#useMRV: boolean = false;\n\t#degInc: number = 0;\n\n\t#sequence: Variable[];\n\t#unaryCons: Constraint[];\n\t#checkedCons: boolean[];\n\t#pruneIntensively: boolean = false;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p: Problem, worstSatisfactionDegree: number | null = null) {\n\t\tsuper(p);\n\t\tthis.#xs = [...this._pro.variables()];\n\t\tthis.#sequence = new Array(this._pro.variableSize());\n\t\tthis.#initializeRelatedConstraintTable();\n\t\tthis.#checkedCons = new Array(this._pro.constraintSize());\n\n\t\tconst temp: Constraint[] = [];\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) temp.push(c);\n\t\t}\n\t\tthis.#unaryCons = [...temp];  // To make it even if it is empty.\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'Forward Checking for Fuzzy CSPs';\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag: boolean): void {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree: number): void {\n\t\tthis.#degInc = degree;\n\t}\n\n\t/**\n\t * Specifies whether or not to intensively prune branches when the problem contains 3- or n-ary constraints.\n\t * Depending on the problem, intensive pruning may increase processing time.\n\t * Default is false.\n\t * @param flag Whether or not to intensively prune branches.\n\t */\n\tsetIntensivePruning(flag: boolean): void {\n\t\tthis.#pruneIntensively = flag;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate: number | null = null): void {\n\t\tthis._targetDeg = rate;\n\t\tif (this._targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e: number = Number.MIN_VALUE;\n\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this._targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable(): void {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j: number = 0; j < this.#xs.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#xs.length));\n\n\t\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#xs[i], this.#xs[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index: number, vj_index: number): Constraint[] {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Prune elements of the domain that make the unary constraint worse than the current worst degree.\n\t#pruneUnaryConstraints(): boolean {\n\t\tfor (const c of this.#unaryCons) {\n\t\t\tconst x = c.at(0) as Variable;\n\t\t\tconst orgVal: number = x.value();  // Save the value.\n\t\t\tconst d: Domain = x.domain();\n\t\t\tconst dp: DomainPruner = x.solverObject;\n\n\t\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\t\tx.assign(d.at(i));\n\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\tdp.hide(i, -1);  // Here's a branch pruning!\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.assign(orgVal);  // Restore the value.\n\t\t\tif (dp.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tfor (let i: number = 0, n: number = d_i.size(); i < n; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdp_i.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are two unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency2(level: number, vi: Variable, c: Constraint) {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tlet vj: Variable | null = null;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== vi) {\n\t\t\t\tvj = x;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst d_j: Domain = (vj as Variable).domain();\n\t\tconst dp_j: DomainPruner = (vj as Variable).solverObject;\n\t\tloop_i: for (let i: number = 0, ni: number = d_i.size(); i < ni; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j: number = 0, nj: number = d_j.size(); j < nj; ++j) {\n\t\t\t\tif (dp_j.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(d_j.at(j));  // Tentative assignment to vj\n\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t}\n\t\t\tdp_i.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are three unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency3(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst d_i: Domain = vi.domain();\n\t\tconst dp_i: DomainPruner = vi.solverObject;\n\n\t\tlet vj: Variable | null = null;\n\t\tlet vk: Variable | null = null;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== vi) {\n\t\t\t\tif (vj === null) {\n\t\t\t\t\tvj = x;\n\t\t\t\t} else {\n\t\t\t\t\tvk = x;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst d_j: Domain = (vj as Variable).domain();\n\t\tconst d_k: Domain = (vk as Variable).domain();\n\t\tconst dp_j: DomainPruner = (vj as Variable).solverObject;\n\t\tconst dp_k: DomainPruner = (vk as Variable).solverObject;\n\n\t\tloop_i: for (let i: number = 0, ni: number = d_i.size(); i < ni; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tvi.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j: number = 0, nj: number = d_j.size(); j < nj; ++j) {\n\t\t\t\tif (dp_j.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(d_j.at(j));  // Tentative assignment to vj\n\t\t\t\tfor (let k: number = 0, nk: number = d_k.size(); k < nk; ++k) {\n\t\t\t\t\tif (dp_k.isValueHidden(k)) continue;\n\t\t\t\t\t(vk as Variable).assign(d_k.at(k));  // Tentative assignment to vk\n\t\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp_i.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vk as Variable).clear();\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// In the case of polynomial constraints and when there are four or more unassigned variables, all combinations of assignments of unassigned variables are examined and pruned.\n\t#checkForwardConsistencyN(level: number, v_i: Variable, c: Constraint, emptySize: number): boolean {\n\t\tconst d_i: Domain = v_i.domain();\n\t\tconst dp_i: DomainPruner = v_i.solverObject;\n\t\tconst emp = new Array(emptySize - 1);\n\t\tlet j: number = 0;\n\n\t\tfor (const x of c) {\n\t\t\tif (x.isEmpty() && x !== v_i) {\n\t\t\t\temp[j++] = x;\n\t\t\t}\n\t\t}\n\t\tconst indexes = new Array(emp.length);\n\n\t\tloop_i: for (let i: number = 0, n: number = d_i.size(); i < n; ++i) {\n\t\t\tif (dp_i.isValueHidden(i)) continue;\n\t\t\tv_i.assign(d_i.at(i));  // Tentative assignment to vi\n\t\t\tindexes.fill(0);\n\n\t\t\tcomLoop: while (true) {\n\t\t\t\tlet hidden: boolean = false;\n\t\t\t\tfor (let k: number = 0; k < emp.length; ++k) {\n\t\t\t\t\tconst d_k: Domain = emp[k].domain();\n\t\t\t\t\tconst dp_k: DomainPruner = emp[k].solverObject;\n\t\t\t\t\tif (dp_k.isValueHidden(indexes[k])) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\temp[k].assign(d_k.at(indexes[k]));\n\t\t\t\t}\n\t\t\t\tif (!hidden) {\n\t\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t\tfor (let k: number = 0; k < emp.length; ++k) {\n\t\t\t\t\tindexes[k] += 1;\n\t\t\t\t\tif (indexes[k] < emp[k].domain().size()) break;\n\t\t\t\t\tindexes[k] = 0;\n\t\t\t\t\tif (k === emp.length - 1) break comLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp_i.hide(i, level);\n\t\t}\n\t\tfor (const x of emp) {\n\t\t\tx.clear();\n\t\t}\n\t\tv_i.clear();\n\t\treturn !dp_i.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number, index: number): boolean {\n\t\tfor (const x_i of this.#xs) {\n\t\t\tif (!x_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(index, x_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tconst emptySize: number = c.emptyVariableSize();\n\t\t\t\tif (emptySize === 1) {\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, x_i, c)) return false;\n\t\t\t\t} else if (this.#pruneIntensively) {  // Depends on options\n\t\t\t\t\tif (emptySize === 2) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency2(level, x_i, c)) return false;\n\t\t\t\t\t} else if (emptySize === 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency3(level, x_i, c)) return false;\n\t\t\t\t\t} else if (emptySize > 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistencyN(level, x_i, c, emptySize)) return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Checks to see if the current variable assignment makes the degree of the past variable worse than the current worst degree.\n\t#checkBackwardConsistency(vc: Variable): boolean {\n\t\tthis.#checkedCons.fill(false);  // Reuse.\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {  // Find past variables.\n\t\t\tconst x_i: Variable = this.#xs[i];\n\t\t\tif (x_i === vc || x_i.isEmpty()) continue;  // If it is a future variable or a present variable.\n\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(vc.index(), i);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (this.#checkedCons[c.index()]) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tconst s: number = c.satisfactionDegree();\n\t\t\t\tif (s !== Constraint.UNDEFINED && s <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.#checkedCons[c.index()] = true;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t#refresh(): void {\n\t\tfor (let i: number = 0; i < this.#sequence.length; ++i) {\n\t\t\tconst index_x_i: number = this.#sequence[i].index();\n\n\t\t\tfor (let j: number = i + 1; j < this.#sequence.length; ++j) {\n\t\t\t\tconst x_j: Variable = this.#sequence[j];\n\t\t\t\tconst cs: Constraint[] = this.#getConstraintsBetween(index_x_i, x_j.index());\n\n\t\t\t\tfor (const c of cs) {\n\t\t\t\t\tconst orgVal: number = x_j.value();\n\t\t\t\t\tconst d_j: Domain = x_j.domain();\n\t\t\t\t\tconst dp_j: DomainPruner = x_j.solverObject;\n\n\t\t\t\t\tfor (let k: number = 0, n: number = d_j.size(); k < n; ++k) {\n\t\t\t\t\t\tif (dp_j.isValueHidden(k)) continue;\n\t\t\t\t\t\tx_j.assign(d_j.at(k));\n\t\t\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\t\t\tdp_j.hide(k, i);  // Here's a branch pruning!\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tx_j.assign(orgVal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV(): number {\n\t\tlet index: number = 0;\n\t\tlet size: number = Number.MAX_VALUE;\n\n\t\tfor (let i: number = 0; i < this.#xs.length; ++i) {\n\t\t\tconst x: Variable = this.#xs[i];\n\t\t\tif (!x.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst d: Domain = x.domain();\n\t\t\tconst s: number = d.size() - x.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level: number): number {\n\t\tlet bc: number = FuzzyForwardChecking.CONTINUE;\n\t\tconst xc_index: number = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst xc: Variable = this.#xs[xc_index];\n\t\tconst d: Domain = xc.domain();\n\t\tconst dp: DomainPruner = xc.solverObject;\n\t\tthis.#sequence[level] = xc;\n\n\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\tif (dp.isValueHidden(i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txc.assign(d.at(i));\n\n\t\t\tfor (const x of this.#xs) x.solverObject.reveal(level);\n\t\t\tif (!this.#checkBackwardConsistency(xc)) continue;\n\t\t\tif (!this.#checkForward(level, xc_index)) continue;\n\n\t\t\tconst nextLevel: number = level + 1;\n\t\t\tbc = (nextLevel === this.#xs.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardChecking.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const x of this.#xs) x.solverObject.reveal(level);\n\t\t}\n\t\txc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level: number): number {\n\t\tlet bc: number = FuzzyForwardChecking.CONTINUE;\n\t\tconst xc: Variable = this.#xs[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d: Domain = xc.domain();\n\t\tconst dp: DomainPruner = xc.solverObject;\n\t\tthis.#sequence[level] = xc;\n\n\t\tfor (let i: number = 0, n: number = d.size(); i < n; ++i) {\n\t\t\tif (dp.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\txc.assign(d.at(i));\n\n\t\t\tconst deg: number = this._pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;\n\t\t\t\tif (this._targetDeg !== null && this._targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.#pruneUnaryConstraints();\n\t\t\t\tthis.#refresh();\n\t\t\t}\n\t\t}\n\t\txc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec(): boolean {\n\t\tthis.#endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const x of this.#xs) {\n\t\t\tx.solverObject = new DomainPruner(x.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis._pro.clearAllVariables();\n\t\tif (!this.#pruneUnaryConstraints()) return false;  // Since _worstSatisfactionDegree_ has been updated, call this function.\n\n\t\tlet success: boolean = false;\n\t\twhile (true) {\n\t\t\tconst bc: number = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {\n\t\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._debugOutput(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\tif (this.foundSolution(this.#sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tthis.#solWorstDeg += this.#degInc;  // Find the next solution within the limit.\n\t\t\t} else if (this._targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const x of this.#xs) {\n\t\t\t\tx.solverObject.revealAll();\n\t\t\t}\n\t\t}\n\t\tthis.#sol.apply();\n\t\tfor (const x of this.#xs) {\n\t\t\tx.solverObject = null;  // Delete branch pruner\n\t\t}\n\t\treturn success;\n\t}\n\n}\n", "import * as stlics from 'stlics/stlics';\r\nimport { FLayout } from './f-layout';\r\nimport { Layout } from './layout/layout';\r\nimport { Control } from './control/control';\r\n\r\ntype Size = { width: number, height: number };\r\ntype Pos = { x: number, y: number };\r\n\r\nexport abstract class FElement {\r\n\r\n\t#parent!: FLayout;\r\n\t#type!: stlics.Variable;\r\n\t#size: Size = { width: 0, height: 0 };\r\n\t#location: Pos = { x: 0, y: 0 };\r\n\r\n\t_estMinSize: Size = { width: Number.MAX_SAFE_INTEGER, height: Number.MAX_SAFE_INTEGER };\r\n\t_states: { comb: number[], size: Size }[] = [];\r\n\t_cans: (Layout | Control)[]       = [];\r\n\t_baseCans: (Layout | Control)[]   = [];\r\n\r\n\tname(): string {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tsetParent(parent: FLayout): void {\r\n\t\tthis.#parent = parent;\r\n\t}\r\n\r\n\tgetParent(): FLayout {\r\n\t\treturn this.#parent;\r\n\t}\r\n\r\n\tgetVariable(): stlics.Variable {\r\n\t\treturn this.#type;\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tgetEstimatedMinimumSize(): Size {\r\n\t\treturn { ...this._estMinSize };\r\n\t}\r\n\r\n\t_getCandidateEntries(): [number, (e: FElement) => Layout | Control][] {\r\n\t\treturn [];\r\n\t}\r\n\r\n\t_assignCandidates(worstDeg: number, dest: (Layout | Control)[]): void {\r\n\t\tdest.length = 0;\r\n\t\tfor (const [d, e] of this._getCandidateEntries()) {\r\n\t\t\tif (worstDeg <= d) {\r\n\t\t\t\tdest.push(e(this));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tinitializeProblem(p: stlics.Problem): void {\r\n\t\tthis._assignCandidates(0, this._cans);\r\n\t\tthis._baseCans = [ ...this._cans ];\r\n\r\n\t\tthis.#type = p.createVariable(stlics.Domain.create([0]), 0, this.name() + ': type');\r\n\r\n\t\tp.createConstraint(\r\n\t\t\t(v0: number): number => this.#typeRelation(v0),\r\n\t\t\t[this.#type],\r\n\t\t\tthis.name() + ': type',\r\n\t\t);\r\n\t}\r\n\r\n\tabstract initializeEstimatedMinimumSize(): void;\r\n\r\n\tabstract initializeDomain(p: stlics.Problem): boolean;\r\n\r\n\tabstract addPossibleDegreesTo(dest: Set<number>): void;\r\n\r\n\tabstract setWorstDegree(deg: number): boolean;\r\n\r\n\t#typeRelation(val: number): number {\r\n\t\tif (this._states.length === 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tconst pc = this._typeToCandidate(val) as Layout | Control;\r\n\t\treturn pc.getDegree();\r\n\t}\r\n\r\n\t_typeToCandidate(val: number | null = null): Layout | Control | null {\r\n\t\tif (val === null && this.#type) {\r\n\t\t\tval = this.#type.value();\r\n\t\t}\r\n\t\tif (val !== null && this._states[val]) {\r\n\t\t\treturn this._cans[this._states[val].comb[0]] as Layout | Control;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tisValid(): boolean {\r\n\t\tif (!this.#type || this.#type.isEmpty()) return false;\r\n\t\tif (!this._states[this.#type.value()]) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tgetMinimumSize(): Size {\r\n\t\treturn { ...this._states[this.#type.value()].size };\r\n\t}\r\n\r\n\tgetMaximumSize(): Size {\r\n\t\treturn (this._typeToCandidate() as Layout | Control).getMaximumSize();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the size of an element.\r\n\t * @return Size.\r\n\t */\r\n\tgetSize(): Size {\r\n\t\treturn { ...this.#size };\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the element.\r\n\t * @param width Width.\r\n\t * @param height Height.\r\n\t */\r\n\tsetSize(width: number, height: number): void {\r\n\t\tthis.#size = { width, height };\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the element location.\r\n\t * @return Location.\r\n\t */\r\n\tgetLocation(): Pos {\r\n\t\treturn { ...this.#location };\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the location of the element.\r\n\t * @param x X.\r\n\t * @param y Y.\r\n\t */\r\n\tsetLocation(x: number, y: number): void {\r\n\t\tthis.#location = { x, y };\r\n\t}\r\n\r\n}\r\n", "import * as stlics from 'stlics/stlics';\r\nimport { FElement } from './f-element';\r\nimport { Layout } from './layout/layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class FLayout extends FElement {\r\n\r\n\tstatic SAME_DIRECTION: number = 0.50;\r\n\r\n\t#children: FElement[] = [];\r\n\r\n\toverride name(): string {\r\n\t\tconst can = this._typeToCandidate();\r\n\t\treturn can?.name() ?? 'layout';\r\n\t}\r\n\r\n\tadd(child: FElement): void {\r\n\t\tchild.setParent(this);\r\n\t\tthis.#children.push(child);\r\n\t}\r\n\r\n\tchildren(): FElement[] {\r\n\t\treturn this.#children;\r\n\t}\r\n\r\n\tgetDescendantSize(): number {\r\n\t\tlet size: number = this.#children.length;\r\n\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tif (c instanceof FLayout) {\r\n\t\t\t\tsize += c.getDescendantSize();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn size;\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\toverride initializeProblem(p: stlics.Problem): void {\r\n\t\tsuper.initializeProblem(p);\r\n\r\n\t\tfor (let i: number = 0; i < this.#children.length; ++i) {\r\n\t\t\tconst c: FElement = this.#children[i];\r\n\t\t\tc.initializeProblem(p);\r\n\r\n\t\t\tp.createConstraint(\r\n\t\t\t\t(v0: number, v1: number): number => this.#correspondingRelation(i, v0, v1),\r\n\t\t\t\t[this.getVariable(), c.getVariable()],\r\n\t\t\t\tthis.name() + ': toChild',\r\n\t\t\t);\r\n\t\t\tif (c instanceof FLayout) {\r\n\t\t\t\tp.createConstraint(\r\n\t\t\t\t\t(v0: number, v1: number): number => this.#differentDirectionRelation(c, v0, v1),\r\n\t\t\t\t\t[this.getVariable(), c.getVariable()],\r\n\t\t\t\t\tthis.name() + ': toChild',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#correspondingRelation(childIndex: number, val1: number, val2: number): number {\r\n\t\tconst s = this._states[val1];\r\n\t\tif (s.comb[childIndex + 1] === val2) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t#differentDirectionRelation(childLayout: FLayout, val1: number, val2: number): number {\r\n\t\tconst pd: number = (this._typeToCandidate(val1) as Layout).getDirection();\r\n\t\tconst cd: number = (childLayout._typeToCandidate(val2) as Layout).getDirection();\r\n\t\tif (pd !== Layout.NO_DIR && cd !== Layout.NO_DIR && pd === cd) {\r\n\t\t\treturn FLayout.SAME_DIRECTION;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tinitializeEstimatedMinimumSize(): void {\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tc.initializeEstimatedMinimumSize();\r\n\t\t}\r\n\t\tlet width: number  = Number.MAX_SAFE_INTEGER;\r\n\t\tlet height: number = Number.MAX_SAFE_INTEGER;\r\n\r\n\t\tfor (const can of this._cans) {\r\n\t\t\tconst d: Size = (can as Layout).getEstimatedMinimumSize(this.#children);\r\n\t\t\twidth  = Math.min(width, d.width);\r\n\t\t\theight = Math.min(height, d.height);\r\n\t\t}\r\n\t\tthis._estMinSize = { width, height };\r\n\t}\r\n\r\n\tinitializeDomain(p: stlics.Problem): boolean {\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tif (!c.initializeDomain(p)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst comb: number[] = new Array(this.#children.length + 1).fill(0);\r\n\t\tconst lens: number[] = new Array(this.#children.length + 1).fill(0);\r\n\r\n\t\tlens[0] = this._cans.length;\r\n\t\tfor (let i: number = 0; i < this.#children.length; ++i) {\r\n\t\t\tlens[i + 1] = this.#children[i]._states.length;\r\n\t\t}\r\n\r\n\t\tlet width: number  = Number.MAX_SAFE_INTEGER;\r\n\t\tlet height: number = Number.MAX_SAFE_INTEGER;\r\n\r\n\t\tthis._states.length = 0;\r\n\r\n\t\tdo {  // Try assigning a value and check the size.\r\n\t\t\tfor (let i: number = 0; i < this.#children.length; ++i) {\r\n\t\t\t\tconst c: FElement = this.#children[i];\r\n\t\t\t\tc.getVariable().assign(comb[i + 1]);\r\n\t\t\t}\r\n\t\t\tconst size = this._cans[comb[0]].getMinimumSize(this.#children);\r\n\r\n\t\t\tif (this.getParent().checkGivenMaximumSize(this, size)) {\r\n\t\t\t\tthis._states.push({ comb: [...comb], size });\r\n\t\t\t\twidth  = Math.min(width, size.width);\r\n\t\t\t\theight = Math.min(height, size.height);\r\n\t\t\t}\r\n\t\t} while (this.#increment(comb, lens));\r\n\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tc.getVariable().clear();\r\n\t\t}\r\n\t\tthis._estMinSize = { width, height };\r\n\r\n\t\tif (this._states.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.getVariable().domain(p.createDomain(0, this._states.length - 1));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#increment(comb: number[], lens: number[]): boolean {\r\n\t\tfor (let i: number = 0; i < comb.length; ++i) {\r\n\t\t\tcomb[i]++;\r\n\t\t\tif (comb[i] < lens[i]) break;\r\n\t\t\tif (i === comb.length - 1) return false;\r\n\t\t\tcomb[i] = 0;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcheckGivenMaximumSize(child: FElement, childMinSize: Size): boolean {\r\n\t\tfor (const lt of this._cans) {\r\n\t\t\tconst min: Size = (lt as Layout).getEstimatedMinimumSizeIf(this.#children, child, childMinSize);\r\n\t\t\tif (this.getParent().checkGivenMaximumSize(this, min)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tsetWorstDegree(deg: number): boolean {\r\n\t\tthis._assignCandidates(deg, this._cans);\r\n\t\tif (this._cans.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tif (!c.setWorstDegree(deg)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddPossibleDegreesTo(dest: Set<number>): void {\r\n\t\tfor (const can of this._baseCans) {\r\n\t\t\tdest.add(can.getDegree());\r\n\t\t}\r\n\t\tfor (const c of this.#children) {\r\n\t\t\tc.addPossibleDegreesTo(dest);\r\n\t\t}\r\n\t\tdest.add(FLayout.SAME_DIRECTION);\r\n\t}\r\n\r\n\r\n\t// -------------------------------------------------------------------------\r\n\r\n\r\n\tdoLayout(): void {\r\n\t\tconst can = this._typeToCandidate() as Layout;\r\n\t\tcan.doLayout(this.#children, this.getSize());\r\n\t}\r\n\r\n}\r\n", "import { FElement } from '../f-element';\r\nimport { FLayout } from '../f-layout';\r\nimport { Layout } from './layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class HorizontalArray extends Layout {\r\n\r\n\tconstructor(owner: any, deg: number) {\r\n\t\tsuper(owner, deg, Layout.HORIZONTAL);\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'horizontal array';\r\n\t}\r\n\r\n\t_calcSize(ss: Size[]): Size {\r\n\t\tlet width: number  = 0;\r\n\t\tlet height: number = 0;\r\n\r\n\t\tfor (const s of ss) {\r\n\t\t\twidth += s.width;\r\n\t\t\tif (height < s.height) {\r\n\t\t\t\theight = s.height;\r\n\t\t\t}\r\n\t\t}\r\n\t\twidth  += (ss.length - 1) * 1 + 2;\r\n\t\theight += 2;\r\n\t\treturn { width, height };\r\n\t}\r\n\r\n\tdoLayout(children: FElement[], size: Size): void {\r\n\t\tlet x: number = 1;\r\n\r\n\t\tfor (const fe of children) {\r\n\t\t\tconst min: Size = fe.getMinimumSize();\r\n\t\t\tconst max: Size = fe.getMaximumSize();\r\n\t\t\tfe.setSize(min.width, Math.min(size.height - 2, max.height));\r\n\t\t\tfe.setLocation(x, 1);\r\n\r\n\t\t\tif (fe instanceof FLayout) {\r\n\t\t\t\tfe.doLayout();\r\n\t\t\t}\r\n\t\t\tx += fe.getSize().width + 1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "import { FElement } from '../f-element';\r\nimport { FLayout } from '../f-layout';\r\nimport { Layout } from './layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class VerticalArray extends Layout {\r\n\r\n\tconstructor(owner: any, deg: number) {\r\n\t\tsuper(owner, deg, Layout.VERTICAL);\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'vertical array';\r\n\t}\r\n\r\n\t_calcSize(ss: Size[]): Size {\r\n\t\tlet width: number  = 0;\r\n\t\tlet height: number = 0;\r\n\r\n\t\tfor (const s of ss) {\r\n\t\t\tif (width < s.width) {\r\n\t\t\t\twidth = s.width;\r\n\t\t\t}\r\n\t\t\theight += s.height;\r\n\t\t}\r\n\t\twidth  += 2;\r\n\t\theight += (ss.length - 1) * 1 + 2;\r\n\t\treturn { width, height };\r\n\t}\r\n\r\n\tdoLayout(children: FElement[], size: Size): void {\r\n\t\tlet y: number = 1;\r\n\r\n\t\tfor (const fe of children) {\r\n\t\t\tconst min: Size = fe.getMinimumSize();\r\n\t\t\tconst max: Size = fe.getMaximumSize();\r\n\t\t\tfe.setSize(Math.min(size.width - 2, max.width), min.height);\r\n\t\t\tfe.setLocation(1, y);\r\n\r\n\t\t\tif (fe instanceof FLayout) {\r\n\t\t\t\tfe.doLayout();\r\n\t\t\t}\r\n\t\t\ty += fe.getSize().height + 1;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "import { FElement } from '../f-element';\r\nimport { FLayout } from '../f-layout';\r\nimport { Layout } from './layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class LeftLabeling extends Layout {\r\n\r\n\tconstructor(owner: any, deg: number) {\r\n\t\tsuper(owner, deg, Layout.HORIZONTAL);\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'left labeling';\r\n\t}\r\n\r\n\t_calcSize(ss: Size[]): Size {\r\n\t\tconst width: number  = ss[0].width + 1 + ss[1].width + 2;\r\n\t\tconst height: number = Math.max(ss[0].height, ss[1].height) + 2;\r\n\t\treturn { width, height };\r\n\t}\r\n\r\n\tdoLayout(children: FElement[], size: Size): void {\r\n\t\tconst le = children[0];\r\n\t\tconst ce = children[1];\r\n\t\tconst ld: Size = le.getMinimumSize();\r\n\t\tconst cd: Size = ce.getMaximumSize();\r\n\r\n\t\tle.setSize(ld.width, ld.height);\r\n\t\tle.setLocation(1, 1);\r\n\r\n\t\tce.setSize(Math.min(size.width - 2 - (ld.width + 1), cd.width), Math.min(size.height - 2, cd.height));\r\n\t\tce.setLocation(1 + le.getSize().width + 1, 1);\r\n\r\n\t\tif (ce instanceof FLayout) {\r\n\t\t\tce.doLayout();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "import { FElement } from '../f-element';\r\nimport { FLayout } from '../f-layout';\r\nimport { Layout } from './layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class TopLabeling extends Layout {\r\n\r\n\t#indent: number = 1;\r\n\r\n\tconstructor(owner: any, deg: number) {\r\n\t\tsuper(owner, deg, Layout.VERTICAL);\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'top labeling';\r\n\t}\r\n\r\n\t_calcSize(ss: Size[]): Size {\r\n\t\tconst width: number  = Math.max(ss[0].width, ss[1].width + this.#indent) + 2;\r\n\t\tconst height: number = ss[0].height + 1 + ss[1].height + 2;\r\n\t\treturn { width, height };\r\n\t}\r\n\r\n\tdoLayout(children: FElement[], size: Size): void {\r\n\t\tconst le = children[0];\r\n\t\tconst ce = children[1];\r\n\t\tconst ld: Size = le.getMinimumSize();\r\n\t\tconst cd: Size = ce.getMaximumSize();\r\n\r\n\t\tle.setSize(ld.width, ld.height);\r\n\t\tle.setLocation(1, 1);\r\n\r\n\t\tce.setSize(Math.min(size.width - 2 - this.#indent, cd.width), Math.min(size.height - 2 - (ld.height + 1), cd.height));\r\n\t\tce.setLocation(1 + this.#indent, 1 + le.getSize().height + 1);\r\n\r\n\t\tif (ce instanceof FLayout) {\r\n\t\t\tce.doLayout();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "import * as stlics from 'stlics/stlics';\r\nimport { FElement } from './f-element';\r\nimport { Control } from './control/control';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class FControl extends FElement {\r\n\r\n\toverride name(): string {\r\n\t\tconst can = this._typeToCandidate();\r\n\t\treturn can?.name() ?? 'control';\r\n\t}\r\n\r\n\tinitializeEstimatedMinimumSize(): void {\r\n\t\tlet width: number  = Number.MAX_SAFE_INTEGER;\r\n\t\tlet height: number = Number.MAX_SAFE_INTEGER;\r\n\r\n\t\tfor (const can of this._cans) {\r\n\t\t\tconst d: Size = (can as Control).getMinimumSize();\r\n\t\t\twidth  = Math.min(width, d.width);\r\n\t\t\theight = Math.min(height, d.height);\r\n\t\t}\r\n\t\tthis._estMinSize = { width, height };\r\n\t}\r\n\r\n\tinitializeDomain(p: stlics.Problem): boolean {\r\n\t\tthis._states.length = 0;\r\n\r\n\t\tfor (let i: number = 0; i < this._cans.length; i += 1) {\r\n\t\t\tconst size = (this._cans[i] as Control).getMinimumSize();\r\n\r\n\t\t\tif (this.getParent().checkGivenMaximumSize(this, size)) {\r\n\t\t\t\tthis._states.push({ comb: [i], size });\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._states.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.getVariable().domain(p.createDomain(0, this._states.length - 1));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetWorstDegree(deg: number): boolean {\r\n\t\tthis._assignCandidates(deg, this._cans);\r\n\t\tif (this._cans.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddPossibleDegreesTo(dest: Set<number>): void {\r\n\t\tfor (const can of this._baseCans) {\r\n\t\t\t(can as Control).addPossibleDegreesTo(dest);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "import { FControl } from './f-control';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { Label } from './control/label';\r\n\r\nexport class Caption extends FControl {\r\n\r\n\t#longText: string;\r\n\t#shortText: string;\r\n\r\n\tconstructor(longText: string, shortText: string) {\r\n\t\tsuper();\r\n\t\tthis.#longText  = longText;\r\n\t\tthis.#shortText = shortText;\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'caption (' + super.name() + ')';\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\treturn [\r\n\t\t\t[1.0, owner => new Label(owner, 1.0, this.#longText)],\r\n\t\t\t[0.8, owner => new Label(owner, 0.8, this.#shortText)],\r\n\t\t];\r\n\t}\r\n\r\n}\r\n", "import { FControl } from './f-control';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { Checkboxes } from './control/checkboxes';\r\nimport { ListBox } from './control/list-box';\r\n\r\nexport class Multiple extends FControl {\r\n\r\n\t#items: string[];\r\n\r\n\tconstructor(...items: string[]) {\r\n\t\tsuper();\r\n\t\tthis.#items = items;\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'multiple (' + super.name() + ')';\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\tconst r: [number, (owner: any) => Layout | Control][] = ListBox.createVariableInstances(0.75, 0.9, this.#items);\r\n\t\tr.push([1.0, owner => new Checkboxes(owner, 1.0, this.#items)]);\r\n\t\treturn r;\r\n\t}\r\n\r\n}\r\n", "import { FControl } from './f-control';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { ListBox } from './control/list-box';\r\nimport { RadioButtons } from './control/radio-buttons';\r\n\r\nexport class Single extends FControl {\r\n\r\n\t#items: string[];\r\n\r\n\tconstructor(...items: string[]) {\r\n\t\tsuper();\r\n\t\tthis.#items = items;\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'single (' + super.name() + ')';\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\tconst r: [number, (owner: any) => Layout | Control][] = ListBox.createVariableInstances(0.75, 0.9, this.#items);\r\n\t\tr.push([1.0, owner => new RadioButtons(owner, 1.0, this.#items)]);\r\n\t\treturn r;\r\n\t}\r\n\r\n}\r\n", "import { FControl } from './f-control';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { Checkbox } from './control/checkbox';\r\nimport { RadioButtons } from './control/radio-buttons';\r\n\r\nexport class SingleBoolean extends FControl {\r\n\r\n\t#itemTrue: string;\r\n\t#itemFalse: string;\r\n\r\n\tconstructor(itemTrue: string, itemFalse: string) {\r\n\t\tsuper();\r\n\t\tthis.#itemTrue  = itemTrue;\r\n\t\tthis.#itemFalse = itemFalse;\r\n\t}\r\n\r\n\toverride name(): string {\r\n\t\treturn 'single boolean (' + super.name() + ')';\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\treturn [\r\n\t\t\t[0.9, owner => new Checkbox(owner, 0.9, this.#itemTrue)],\r\n\t\t\t[1.0, owner => new RadioButtons(owner, 1.0, [this.#itemTrue, this.#itemFalse])],\r\n\t\t];\r\n\t}\r\n\r\n}\r\n", "import { FElement } from './f-element';\r\nimport { FLayout } from './f-layout';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { HorizontalArray } from './layout/array-horizontal';\r\nimport { VerticalArray } from './layout/array-vertical';\r\n\r\nexport class Group extends FLayout {\r\n\r\n\tconstructor(args: { children: FElement[] }) {\r\n\t\tsuper();\r\n\t\tif (args.children) {\r\n\t\t\tfor (const c of args.children) {\r\n\t\t\t\tthis.add(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\treturn [\r\n\t\t\t[0.98, owner => new HorizontalArray(owner, 0.98)],\r\n\t\t\t[1.0,  owner => new VerticalArray(owner, 1.0)],\r\n\t\t];\r\n\t}\r\n\r\n}\r\n", "import { FElement } from './f-element';\r\nimport { FLayout } from './f-layout';\r\nimport { Control } from './control/control';\r\nimport { Layout } from './layout/layout';\r\nimport { LeftLabeling } from './layout/labeling-left';\r\nimport { TopLabeling } from './layout/labeling-top';\r\n\r\nexport class Labeling extends FLayout {\r\n\r\n\tconstructor(e_label: FElement, e_content: FElement) {\r\n\t\tsuper();\r\n\t\tthis.add(e_label);\r\n\t\tthis.add(e_content);\r\n\t}\r\n\r\n\toverride _getCandidateEntries(): [number, (owner: any) => Layout | Control][] {\r\n\t\treturn [\r\n\t\t\t[1.0, owner => new LeftLabeling(owner, 1)],\r\n\t\t\t[0.9, owner => new TopLabeling(owner, 0.9)],\r\n\t\t];\r\n\t}\r\n\r\n}\r\n", "import * as stlics from 'stlics/stlics';\r\nimport { FElement } from './f-element';\r\nimport { FLayout } from './f-layout';\r\n\r\ntype Size = { width: number, height: number };\r\n\r\nexport class FlexibleLayout {\r\n\r\n\tstatic DEBUG: boolean = true;\r\n\r\n\tstatic SORT_BY_DESCENDANT: boolean  = true;\r\n\tstatic SORT_BY_PATH_LENGTH: boolean = true;\r\n\r\n\t#root!: FLayout;\r\n\t#size: Size = { width: 0, height: 0 };\r\n\t#lastDegree: number = 0;\r\n\r\n\tsetRootContainer(cw: FLayout): void {\r\n\t\tthis.#root = cw;\r\n\t\tconst that = this;\r\n\t\tthis.#root.setParent(new class {\r\n\t\t\tcheckGivenMaximumSize(_fe: FElement, size: Size): boolean {\r\n\t\t\t\tconst h: number = that.#size.height;\r\n\t\t\t\tconst w: number = that.#size.width;\r\n\t\t\t\treturn (size.height <= h && size.width <= w);\r\n\t\t\t}\r\n\t\t}() as FLayout);\r\n\t}\r\n\r\n\tgetRootContainer(): FLayout {\r\n\t\treturn this.#root;\r\n\t}\r\n\r\n\tgetLastSatisfactionDegree(): number {\r\n\t\treturn this.#lastDegree;\r\n\t}\r\n\r\n\tlayoutContainer(ts: Size): boolean {\r\n\t\tif (this.#performLayout(ts)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t#performLayout(targetSize: Size): boolean {\r\n\t\tthis.#size = { ...targetSize };\r\n\t\tconst p = new stlics.Problem();\r\n\t\tthis.#root.initializeProblem(p);\r\n\t\tthis.#sortVariablesInBreadthFirstOrder(p);\r\n\r\n\t\tconst pd = new Set<number>();\r\n\t\tthis.#root.addPossibleDegreesTo(pd);\r\n\t\tif (!this.#solveProblem(p, pd)) return false;\r\n\r\n\t\tthis.#root.setSize(this.#size.width, this.#size.height);\r\n\t\tthis.#root.setLocation(0, 0);\r\n\t\tthis.#root.doLayout();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#solveProblem(p: stlics.Problem, possibleDegrees: Set<number>): boolean {\r\n\t\tlet time = 0;\r\n\t\tif (FlexibleLayout.DEBUG) {\r\n\t\t\tconsole.log('\\nsolveProblem - started');\r\n\t\t\ttime = Date.now();\r\n\t\t}\r\n\t\tlet success = false;\r\n\t\tconst pds = [...possibleDegrees.values()].sort((a, b) => b - a);\r\n\r\n\t\tfor (const r of pds) {\r\n\t\t\tif (r <= 0) continue;\r\n\t\t\tif (FlexibleLayout.DEBUG) console.log(`\\tIteration in wsd ${r}`);\r\n\t\t\tif (!this.#setWorstDegree(p, r)) continue;\r\n\r\n\t\t\tconst mon = new stlics.Monitor();\r\n\t\t\tmon.setTarget(r);\r\n\t\t\tmon.setTimeLimit(100);\r\n\r\n\t\t\tconst solver = new stlics.FuzzyForwardChecking();\r\n\r\n\t\t\tif (solver.solve(p, mon)) {\r\n\t\t\t\tsuccess = true;\r\n\t\t\t\tthis.#lastDegree = r;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (FlexibleLayout.DEBUG) {\r\n\t\t\tconsole.log(`solveProblem - finished (${success}, wsd = ${p.degree()})\\n`);\r\n\t\t\tconsole.log(`time: ${Date.now() - time}`);\r\n\t\t}\r\n\t\treturn success;\r\n\t}\r\n\r\n\t#setWorstDegree(p: stlics.Problem, worstDesirability: number): boolean {\r\n\t\tconst res = this.#root.setWorstDegree(worstDesirability);\r\n\t\tif (!res) {\r\n\t\t\tconsole.log('Failure: initializeDomain');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.#root.initializeEstimatedMinimumSize();\r\n\t\tif (!this.#root.initializeDomain(p)) {\r\n\t\t\tconsole.log('Failure: initializeDomain');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#sortVariablesInBreadthFirstOrder(p: stlics.Problem): void {\r\n\t\tconst lens = stlics.averagePathLengths(p);\r\n\t\tconst vs   = [this.#root.getVariable()];\r\n\t\tlet ls = [this.#root];\r\n\r\n\t\twhile (ls.length > 0) {\r\n\t\t\tconst nls: FLayout[] = [];\r\n\r\n\t\t\tfor (const l of ls) {\r\n\t\t\t\tfor (const c of l.children()) {\r\n\t\t\t\t\tif (c instanceof FLayout) {\r\n\t\t\t\t\t\tnls.push(c);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.#sortVariablesInCertainOrder(nls, lens);\r\n\t\t\tfor (const l of nls) {\r\n\t\t\t\tvs.push(l.getVariable());\r\n\t\t\t}\r\n\t\t\tls = nls;\r\n\t\t}\r\n\t\tp.sortVariables((o1: stlics.Variable, o2: stlics.Variable): number => {\r\n\t\t\treturn vs.indexOf(o1) - vs.indexOf(o2);\r\n\t\t});\r\n\t}\r\n\r\n\t#sortVariablesInCertainOrder(ls: FLayout[], lens: number[]): void {\r\n\t\tls.sort((l1, l2) => {\r\n\t\t\tif (FlexibleLayout.SORT_BY_DESCENDANT) {\r\n\t\t\t\tconst ds1 = l1.getDescendantSize();\r\n\t\t\t\tconst ds2 = l2.getDescendantSize();\r\n\t\t\t\tconst r = ds2 - ds1;\r\n\t\t\t\tif (r !== 0) return r;\r\n\t\t\t}\r\n\t\t\tif (FlexibleLayout.SORT_BY_PATH_LENGTH) {\r\n\t\t\t\tconst len1 = lens[l1.getVariable().index()];\r\n\t\t\t\tconst len2 = lens[l2.getVariable().index()];\r\n\t\t\t\treturn len2 - len1;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t}\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": ["Control", "#degree", "#minSize", "#maxSize", "owner", "degree", "dest", "s", "Button", "Control", "#text", "owner", "deg", "text", "s", "Checkbox", "Control", "#text", "owner", "deg", "text", "s", "Checkboxes", "Control", "#items", "owner", "deg", "items", "maxLen", "it", "Label", "Control", "#text", "owner", "deg", "text", "s", "ListBox", "_ListBox", "Control", "#items", "minDeg", "maxDeg", "items", "owner", "ret", "rDeg", "i", "r", "count", "deg", "minH", "maxLen", "it", "RadioButtons", "Control", "#items", "owner", "deg", "items", "maxLen", "it", "Layout", "_Layout", "#owner", "#degree", "#direction", "owner", "degree", "direction", "children", "ss", "e", "child", "minSize", "Element", "#index", "#name", "index", "name", "Variable", "_Variable", "Element", "#INVALID", "#owner", "#d", "#v", "#cs", "owner", "d", "n", "np", "v", "index", "c", "xs", "x", "i", "value", "Domain", "DomainRanged", "Domain", "#min", "#max", "min", "max", "v", "index", "DomainArbitrary", "Domain", "#vs", "vs", "v", "index", "Constraint", "_Constraint", "Element", "r", "n", "np", "s", "sn", "Constraint1", "Constraint", "#xs", "r", "x", "index", "cs", "c", "sd", "cd", "v", "s", "Constraint2", "Constraint", "#xs", "r", "x1", "x2", "index", "x", "cs", "c", "n", "sd", "cd", "v1", "v2", "d1", "d2", "s", "Constraint3", "Constraint", "#xs", "r", "x1", "x2", "x3", "index", "x", "cs", "c", "n", "sd", "cd", "v1", "v2", "v3", "d1", "d2", "d3", "s", "ConstraintN", "Constraint", "#xs", "#vs", "r", "xs", "index", "x", "cs", "c", "n", "i", "sd", "emptyIndices", "currentStep", "cd", "d", "v", "s", "Problem", "#fv", "o", "d", "Variable", "#fc", "r", "xs", "Constraint1", "Constraint2", "Constraint3", "ConstraintN", "#isFuzzy", "#xs", "#cs", "fn", "x", "args", "DomainArbitrary", "DomainRanged", "c", "index", "i", "comparator", "name", "v1", "v2", "cs", "cur", "s", "Constraint", "ave", "n", "Solver", "#debugOutput", "e", "#listener", "pro", "count", "msec", "rate", "l", "solution", "worstDegree", "finish", "flag", "fn", "str", "Assignment", "#x", "#v", "args", "AssignmentList", "_AssignmentList", "xs", "al", "#as", "p", "x", "Assignment", "a", "variable", "value", "diff", "index", "DomainPruner", "_DomainPruner", "#UNHIDDEN", "#hiddenLevels", "#hiddenSize", "size", "index", "level", "i", "FuzzyForwardChecking", "_FuzzyForwardChecking", "Solver", "#xs", "#sol", "AssignmentList", "#relCons", "#solWorstDeg", "#iterCount", "#endTime", "#useMRV", "#degInc", "#sequence", "#unaryCons", "#checkedCons", "#pruneIntensively", "p", "worstSatisfactionDegree", "#initializeRelatedConstraintTable", "temp", "c", "flag", "degree", "rate", "j", "i", "#getConstraintsBetween", "vi_index", "vj_index", "#pruneUnaryConstraints", "x", "orgVal", "d", "dp", "n", "#checkForwardConsistency", "level", "vi", "d_i", "dp_i", "#checkForwardConsistency2", "vj", "d_j", "dp_j", "loop_i", "ni", "nj", "#checkForwardConsistency3", "vk", "d_k", "dp_k", "k", "nk", "#checkForwardConsistencyN", "v_i", "emptySize", "emp", "indexes", "comLoop", "hidden", "#checkForward", "index", "x_i", "cs", "#checkBackwardConsistency", "vc", "s", "Constraint", "#refresh", "index_x_i", "x_j", "#indexOfVariableWithMRV", "size", "#branch", "bc", "xc_index", "xc", "nextLevel", "#branchLast", "deg", "DomainPruner", "success", "FElement", "#parent", "#type", "#size", "#location", "parent", "worstDeg", "dest", "d", "e", "p", "Domain", "v0", "#typeRelation", "val", "width", "height", "x", "y", "FLayout", "_FLayout", "FElement", "#children", "child", "size", "c", "p", "i", "v0", "v1", "#correspondingRelation", "#differentDirectionRelation", "childIndex", "val1", "val2", "childLayout", "pd", "cd", "Layout", "width", "height", "can", "d", "comb", "lens", "#increment", "childMinSize", "lt", "min", "deg", "dest", "HorizontalArray", "Layout", "owner", "deg", "ss", "width", "height", "s", "children", "size", "x", "fe", "min", "max", "FLayout", "VerticalArray", "Layout", "owner", "deg", "ss", "width", "height", "s", "children", "size", "y", "fe", "min", "max", "FLayout", "LeftLabeling", "Layout", "owner", "deg", "ss", "width", "height", "children", "size", "le", "ce", "ld", "cd", "FLayout", "TopLabeling", "Layout", "#indent", "owner", "deg", "ss", "width", "height", "children", "size", "le", "ce", "ld", "cd", "FLayout", "FControl", "FElement", "width", "height", "can", "d", "p", "i", "size", "deg", "dest", "Caption", "FControl", "#longText", "#shortText", "longText", "shortText", "owner", "Label", "Multiple", "FControl", "#items", "items", "r", "ListBox", "owner", "Checkboxes", "Single", "FControl", "#items", "items", "r", "ListBox", "owner", "RadioButtons", "SingleBoolean", "FControl", "#itemTrue", "#itemFalse", "itemTrue", "itemFalse", "owner", "Checkbox", "RadioButtons", "Group", "FLayout", "args", "c", "owner", "HorizontalArray", "VerticalArray", "Labeling", "FLayout", "e_label", "e_content", "owner", "LeftLabeling", "TopLabeling", "FlexibleLayout", "_FlexibleLayout", "#root", "#size", "#lastDegree", "cw", "that", "_fe", "size", "h", "w", "ts", "#performLayout", "targetSize", "p", "Problem", "#sortVariablesInBreadthFirstOrder", "pd", "#solveProblem", "possibleDegrees", "time", "success", "pds", "a", "b", "r", "#setWorstDegree", "mon", "FuzzyForwardChecking", "worstDesirability", "lens", "vs", "ls", "nls", "l", "c", "FLayout", "#sortVariablesInCertainOrder", "o1", "o2", "l1", "l2", "ds1", "len1"]
}
